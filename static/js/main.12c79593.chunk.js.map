{"version":3,"sources":["logo.svg","Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","titulo","responsable","descripcion","prioridad","handleInput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","props","onAddTodo","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","concat","toConsumableArray","index","window","confirm","filter","i","_this2","map","key","onClick","removeTodo","length","src_Form_Form","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12c79593.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            titulo: '',\r\n            responsable: '',\r\n            descripcion: '',\r\n            prioridad: 'alta'\r\n        };\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    //Eventos\r\n    handleInput(e){\r\n        const { value, name } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        this.props.onAddTodo(this.state);\r\n        this.setState = ({\r\n            titulo: '',\r\n            responsable: '',\r\n            descripcion: '',\r\n            prioridad: 'alta'\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"card\">\r\n                        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"titulo\"\r\n                            className=\"form-control\"\r\n                            value={this.state.titulo}\r\n                            onChange={this.handleInput}\r\n                            placeholder=\"Titulo\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"responsable\"\r\n                            className=\"form-control\"\r\n                            value={this.state.responsable}\r\n                            onChange={this.handleInput}\r\n                            placeholder=\"Responsable\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"descripcion\"\r\n                            className=\"form-control\"\r\n                            value={this.state.descripcion}\r\n                            onChange={this.handleInput}\r\n                            placeholder=\"Descripcion\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <select\r\n                                name=\"prioridad\"\r\n                                className=\"form-control\"\r\n                                value={this.state.prioridad}\r\n                                onChange={this.handleInput}\r\n                            >\r\n                            <option>Alta</option>\r\n                            <option>media</option>\r\n                            <option>Baja</option>\r\n                            </select>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Guardar\r\n                        </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Importo archivo json = simulo datos del backend\nimport { todos } from './todos.json';\n\nimport Form from './Form/Form';\n\nclass App extends Component {\n\n  //Defino objeto que tiene los datos del archivo json\n  constructor() {\n    super();\n    this.state = {\n      todos\n    };\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  handleAddTodo(todo){\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  removeTodo(index){\n    if(window.confirm('¿Seguro que la deseas borrar?'))\n    {\n      this.setState({\n        todos: this.state.todos.filter((e, i) => {\n          return i !== index\n        })\n      });\n    }\n  }\n\n  render(){\n    //Recorrer archivo json con .map\n    const todos = this.state.todos.map((todo, i) => {\n      return(\n        <div className=\"container\">\n          <div className=\"row\" key={i}>\n                <div className=\"card mt-4 col-12\">\n                  <div className=\"card-header\">\n                    <h3>{todo.titulo}</h3>\n                    <span className=\"badge badge-pill badge-danger ml-2\">\n                      {todo.prioridad}\n                    </span>\n                  </div>\n                  <div className=\"card-body\">\n                    <p>{todo.responsable}</p>\n                    <p>{todo.descripcion}</p>\n                  </div>\n                  <div className=\"card-footer\">\n                    <button className=\"btn btn-danger\"\n                            onClick={this.removeTodo.bind(this, i)}\n                    >\n                      Eliminar\n                    </button>\n                  </div>\n                </div>\n          </div>\n        </div>\n      )\n    });\n\n    return (\n      <div className=\"App\">\n        {/*Navegación*/}\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <a className=\"text-white\">\n            <span className=\"ml-4 mr-2 display-4\">Tareas -- </span>\n            <span className=\"display-4\">\n                { this.state.todos.length }\n            </span>\n          </a>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n            <div className=\"col-12\">\n              <Form onAddTodo={this.handleAddTodo}/>\n            </div>\n          </div>\n        </div>\n            \n        <div className=\"container\">\n          <div className=\"row\">\n              {todos}\n          </div>\n        </div>\n        \n        <footer className=\"App-footer\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </footer>\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}